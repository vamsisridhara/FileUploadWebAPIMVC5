
@model WebValidationModel
@using FileUploadWebAPIMVC5.Models
@using Newtonsoft.Json
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Web Validation Form</h2>


@using (Html.BeginForm(null, null, null, FormMethod.Post, new { @id = "rulesform" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @*@Html.ValidationSummary(false, "", new { @class = "text-danger" })*@
        <div class="form-group">
            @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @class = "form-control", id = "description" } })
                @Html.ValidationMessageFor(model => model.description, "Please enter Name", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.weight, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.weight, new { htmlAttributes = new { @class = "form-control", id = "weight" } })
                @Html.ValidationMessageFor(model => model.weight, "Please enter Weight", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.length, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @{ Html.EnableClientValidation(false); }
                @Html.EditorFor(model => model.length, new { htmlAttributes = new { @class = "form-control", id = "length" } })

            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.width, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.width, new { htmlAttributes = new { @class = "form-control", id = "width" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.height, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.height, new { htmlAttributes = new { @class = "form-control", id = "height" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.isFragile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                <div class="checkbox">
                    @Html.EditorFor(model => model.isFragile, new { htmlAttributes = new { id = "fragile" } })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" id="btnSubmit" />
                <input type="reset" id="btnCancel" value="Reset" class="btn btn-default" />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10" id="divupdate">
                
            </div>
        </div>
    </div>

}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            $("#btnCancel").click(function () {
                $(this).resetValidation();
                $("#divupdate").empty();
                $("#divupdate").hide();
            });
            // hide the table on page load
            $("#divupdate").hide();
            $("form").data("validator").settings.submitHandler = function (form) {
                var obj = {
                    'description': $('#description').val(),
                    'weight': $('#weight').val(),
                    'length': $('#length').val(),
                    'width': $('#width').val(),
                    'height': $('#height').val(),
                    'fragile': $('#description').val(),
                };
                $.ajax({
                    url: '/FileUploadWebAPIMVC5/WebValidation/postrules',
                    data: JSON.stringify(obj),
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        // empty the div before adding the selected entry to the table
                        $("#divupdate").empty();
                        // build the table dynamically and append to div
                        var tbl = $('<table id="tableSearch" class="table table-hover table-responsive"><tr>' +
                                    '<th>Rules Passed</th><th>Rules Failed</th>'
                                    + '</tr>');
                        var tr = $("<tr>");
                        $("<td>Passed: " + data.passRules + "</td>").appendTo(tr);
                        $("<td>Failed: " + data.failRules + "</td>").appendTo(tr);
                        tbl.append(tr);
                        $('#divupdate').append(tbl);
                        $("#divupdate").show();
                    },
                    error: function (response) {
                        // show alert in error
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        // show alert in error
                        alert(response.responseText);
                    }
                });
            };

        });
        (function ($) {
            $.fn.resetValidation = function () {
                var $form = this.closest('form');
                $form.validate().resetForm();
                $form.find("[data-valmsg-summary=true]")
                    .removeClass("validation-summary-errors")
                    .addClass("validation-summary-valid")
                    .find("ul").empty();
                $form.find("[data-valmsg-replace]")
                    .removeClass("field-validation-error")
                    .addClass("field-validation-valid")
                    .empty();
                return $form;
            };

            $.fn.formReset = function (resetValidation) {
                var $form = this.closest('form');
                $form[0].reset();
                if (resetValidation == undefined || resetValidation) {
                    $form.resetValidation();
                }
                return $form;
            }
        })(jQuery);
    </script>
}
